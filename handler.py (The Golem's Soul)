{"cells":[{"cell_type":"code","source":"# handler.py\n# This Python code runs in AWS Lambda, acting as the bridge.\n\nimport json\nimport os\nimport boto3\nimport time\n\ndef lambda_handler(event, context):\n    \"\"\"\n    Receives a command via API Gateway, executes it on a target machine\n    using AWS Systems Manager Run Command, and returns the result.\n    \"\"\"\n    # 1. Extract the command from the incoming request body\n    body = json.loads(event.get('body', '{}'))\n    command = body.get('command', 'echo \"No command received.\"')\n    \n    ssm_client = boto3.client('ssm')\n    \n    instance_id = os.environ.get('TARGET_INSTANCE_ID')\n    \n    if not instance_id:\n        return {\n            'statusCode': 500,\n            'body': json.dumps({'error': 'Target instance ID not configured.'})\n        }\n\n    # 2. Send the command to the target instance via SSM Run Command\n    try:\n        response = ssm_client.send_command(\n            InstanceIds=[instance_id],\n            DocumentName='AWS-RunShellScript',\n            Parameters={'commands': [command]},\n            TimeoutSeconds=300\n        )\n        command_id = response['Command']['CommandId']\n        \n        # 3. Wait and retrieve the command output\n        # In a real-world async setup, this would be handled differently,\n        # but for our purposes, a short wait is sufficient for demonstration.\n        time.sleep(2.5) \n        \n        output = ssm_client.get_command_invocation(\n            CommandId=command_id,\n            InstanceId=instance_id\n        )\n        \n        return {\n            'statusCode': 200,\n            'body': json.dumps({\n                'message': 'Command execution initiated.',\n                'commandId': command_id,\n                'status': output.get('Status'),\n                'output': output.get('StandardOutputContent'),\n                'error': output.get('StandardErrorContent')\n            })\n        }\n\n    except Exception as e:\n        return {\n            'statusCode': 500,\n            'body': json.dumps({'error': str(e)})\n        }","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}